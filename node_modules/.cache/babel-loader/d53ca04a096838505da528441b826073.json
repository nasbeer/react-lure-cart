{"ast":null,"code":"import * as Types from '../types';\nimport { showToast } from './toast';\nimport axios from 'axios';\nimport qs from 'qs';\nimport { getProductsPromise, getAdvertisementsPromise } from '../../fakebackend/promiseData';\nimport { insertAdvert } from '../../utils';\nlet adverts = [];\nlet productsCache = [];\nexport const loadProductsInit = isLoadMoreRequest => ({\n  type: isLoadMoreRequest ? Types.LOAD_MORE_PRODUCTS_INIT : Types.LOAD_PRODUCTS_INIT\n});\nexport const loadProductsError = (isLoadMoreRequest, error) => (dispatch, getState) => {\n  dispatch(showToast({\n    title: 'Error',\n    text: error\n  }));\n  dispatch({\n    type: isLoadMoreRequest ? Types.LOAD_MORE_PRODUCTS_ERROR : Types.LOAD_PRODUCTS_ERROR,\n    payload: error\n  });\n};\nexport const loadProductsSuccess = (isLoadMoreRequest, products) => ({\n  type: isLoadMoreRequest ? Types.LOAD_MORE_PRODUCTS_SUCCESS : Types.LOAD_PRODUCTS_SUCCESS,\n  payload: products\n});\n\nconst errorHandler = (successfn, errorAction, dispatch) => {\n  return async (...args) => {\n    try {\n      await successfn(...args);\n    } catch (error) {\n      if (error.message) {\n        dispatch(errorAction(args[1], error.message));\n      }\n    }\n  };\n};\n\nexport const loadProducts = (params, isLoadMoreRequest, callback) => async (dispatch, getState) => {\n  dispatch(loadProductsInit(isLoadMoreRequest));\n  errorHandler(async (params, isLoadMoreRequest, callback) => {\n    if (!isLoadMoreRequest) {\n      const response = await axios.get('/adverts');\n      adverts = response.data; //adverts = await getAdvertisementsPromise();\n    }\n\n    const strParams = qs.stringify(params);\n    const response = await axios.get(\"/products?\".concat(strParams));\n    const products = response.data; // const products = await getProductsPromise(params);\n    // console.log(moreProducts.map(p => p[params.sort.key]));\n\n    const productsWithAdverts = insertAdvert(products, adverts, 5);\n    dispatch(loadProductsSuccess(isLoadMoreRequest, productsWithAdverts));\n    if (callback) callback();\n  }, loadProductsError, dispatch)(params, isLoadMoreRequest, callback);\n}; //snackbars, errors handling, css cards hoover\n// Error handler for async / await functions\n\n/*\nconst catchErrors = fn => {\n  return function(req, res, next) {\n    return fn(req, res, next).catch(next);\n  };\n};\n*/","map":{"version":3,"sources":["/Applications/MAMP/htdocs/eshop-page/src/store/actions/products.js"],"names":["Types","showToast","axios","qs","getProductsPromise","getAdvertisementsPromise","insertAdvert","adverts","productsCache","loadProductsInit","isLoadMoreRequest","type","LOAD_MORE_PRODUCTS_INIT","LOAD_PRODUCTS_INIT","loadProductsError","error","dispatch","getState","title","text","LOAD_MORE_PRODUCTS_ERROR","LOAD_PRODUCTS_ERROR","payload","loadProductsSuccess","products","LOAD_MORE_PRODUCTS_SUCCESS","LOAD_PRODUCTS_SUCCESS","errorHandler","successfn","errorAction","args","message","loadProducts","params","callback","response","get","data","strParams","stringify","productsWithAdverts"],"mappings":"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","sourcesContent":["import * as Types from '../types';\nimport { showToast } from './toast';\nimport axios from 'axios';\nimport qs from 'qs';\n\nimport {\n  getProductsPromise,\n  getAdvertisementsPromise,\n} from '../../fakebackend/promiseData';\n\nimport { insertAdvert } from '../../utils';\n\nlet adverts = [];\nlet productsCache = [];\n\nexport const loadProductsInit = isLoadMoreRequest => ({\n  type: isLoadMoreRequest\n    ? Types.LOAD_MORE_PRODUCTS_INIT\n    : Types.LOAD_PRODUCTS_INIT,\n});\n\nexport const loadProductsError = (isLoadMoreRequest, error) => (\n  dispatch,\n  getState,\n) => {\n  dispatch(showToast({ title: 'Error', text: error }));\n  dispatch({\n    type: isLoadMoreRequest\n      ? Types.LOAD_MORE_PRODUCTS_ERROR\n      : Types.LOAD_PRODUCTS_ERROR,\n    payload: error,\n  });\n};\n\nexport const loadProductsSuccess = (isLoadMoreRequest, products) => ({\n  type: isLoadMoreRequest\n    ? Types.LOAD_MORE_PRODUCTS_SUCCESS\n    : Types.LOAD_PRODUCTS_SUCCESS,\n  payload: products,\n});\n\nconst errorHandler = (successfn, errorAction, dispatch) => {\n  return async (...args) => {\n    try {\n      await successfn(...args);\n    } catch (error) {\n      if (error.message) {\n        dispatch(errorAction(args[1], error.message));\n      }\n    }\n  };\n};\n\nexport const loadProducts = (params, isLoadMoreRequest, callback) => async (\n  dispatch,\n  getState,\n) => {\n  dispatch(loadProductsInit(isLoadMoreRequest));\n\n  errorHandler(\n    async (params, isLoadMoreRequest, callback) => {\n      if (!isLoadMoreRequest) {\n        const response = await axios.get('/adverts');\n        adverts = response.data;\n        //adverts = await getAdvertisementsPromise();\n      }\n\n      const strParams = qs.stringify(params);\n      const response = await axios.get(`/products?${strParams}`);\n      const products = response.data;\n\n      // const products = await getProductsPromise(params);\n\n      // console.log(moreProducts.map(p => p[params.sort.key]));\n      const productsWithAdverts = insertAdvert(products, adverts, 5);\n      dispatch(loadProductsSuccess(isLoadMoreRequest, productsWithAdverts));\n      if (callback) callback();\n    },\n    loadProductsError,\n    dispatch,\n  )(params, isLoadMoreRequest, callback);\n};\n\n//snackbars, errors handling, css cards hoover\n\n// Error handler for async / await functions\n\n/*\nconst catchErrors = fn => {\n  return function(req, res, next) {\n    return fn(req, res, next).catch(next);\n  };\n};\n*/\n"]},"metadata":{},"sourceType":"module"}