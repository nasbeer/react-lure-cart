{"ast":null,"code":"import * as Types from '../types';\nimport { config } from '../../services/config';\nimport { showToast } from './toast';\nexport const addProductToCart = product => (dispatch, getState) => {\n  const existing = getState().cartReducer.cartProducts.filter(p => p.product.id === product.id).length;\n  let products = [...getState().cartReducer.cartProducts];\n\n  if (existing === 0) {\n    products = [{\n      product,\n      quantity: 1\n    }, ...products];\n  }\n\n  if (existing === 1) {\n    let _product = products.find(p => p.product.id === product.id);\n\n    const index = products.indexOf(_product);\n    const filtered = getState().cartReducer.cartProducts.filter(p => p.product.id !== product.id);\n    _product.quantity++;\n    filtered.splice(index, 0, _product); // at index\n  }\n\n  dispatch(showToast({\n    title: 'Notification',\n    text: \"You added the \".concat(product.name, \" to the cart.\")\n  }));\n  dispatch({\n    type: Types.ADD_PRODUCT_TO_CART,\n    payload: products\n  });\n};\nexport const removeProductFromCart = product => (dispatch, getState) => {\n  const existing = getState().cartReducer.cartProducts.find(p => p.product.id === product.id);\n  let products = [...getState().cartReducer.cartProducts];\n\n  if (existing.quantity === 1) {\n    products = products.filter(p => p.product.id !== product.id);\n  }\n\n  if (existing.quantity > 1) {\n    let _product = products.find(p => p.product.id === product.id);\n\n    _product.quantity--;\n  }\n\n  dispatch(showToast({\n    title: 'Notification',\n    text: \"You removed the \".concat(product.name, \" from the cart.\")\n  }));\n  dispatch({\n    type: Types.REMOVE_PRODUCT_FROM_CART,\n    payload: products\n  });\n};\nexport const removeProductsFromCart = product => (dispatch, getState) => {\n  let products = [...getState().cartReducer.cartProducts];\n  products = products.filter(p => p.product.id !== product.id);\n  dispatch(showToast({\n    title: 'Notification',\n    text: \"You removed all of the \".concat(product.name, \"'s from the cart.\")\n  }));\n  dispatch({\n    type: Types.REMOVE_PRODUCTS_FROM_CART,\n    payload: products\n  });\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/eshop-page/src/store/actions/cart.js"],"names":["Types","config","showToast","addProductToCart","product","dispatch","getState","existing","cartReducer","cartProducts","filter","p","id","length","products","quantity","_product","find","index","indexOf","filtered","splice","title","text","name","type","ADD_PRODUCT_TO_CART","payload","removeProductFromCart","REMOVE_PRODUCT_FROM_CART","removeProductsFromCart","REMOVE_PRODUCTS_FROM_CART"],"mappings":"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","sourcesContent":["import * as Types from '../types';\nimport { config } from '../../services/config';\nimport { showToast } from './toast';\n\nexport const addProductToCart = product => (dispatch, getState) => {\n  const existing = getState().cartReducer.cartProducts.filter(\n    p => p.product.id === product.id,\n  ).length;\n  let products = [...getState().cartReducer.cartProducts];\n  if (existing === 0) {\n    products = [{ product, quantity: 1 }, ...products];\n  }\n  if (existing === 1) {\n    let _product = products.find(p => p.product.id === product.id);\n    const index = products.indexOf(_product);\n    const filtered = getState().cartReducer.cartProducts.filter(\n      p => p.product.id !== product.id,\n    );\n    _product.quantity++;\n    filtered.splice(index, 0, _product); // at index\n  }\n\n  dispatch(\n    showToast({\n      title: 'Notification',\n      text: `You added the ${product.name} to the cart.`,\n    }),\n  );\n\n  dispatch({\n    type: Types.ADD_PRODUCT_TO_CART,\n    payload: products,\n  });\n};\n\nexport const removeProductFromCart = product => (dispatch, getState) => {\n  const existing = getState().cartReducer.cartProducts.find(\n    p => p.product.id === product.id,\n  );\n  let products = [...getState().cartReducer.cartProducts];\n  if (existing.quantity === 1) {\n    products = products.filter(p => p.product.id !== product.id);\n  }\n\n  if (existing.quantity > 1) {\n    let _product = products.find(p => p.product.id === product.id);\n    _product.quantity--;\n  }\n\n  dispatch(\n    showToast({\n      title: 'Notification',\n      text: `You removed the ${product.name} from the cart.`,\n    }),\n  );\n\n  dispatch({\n    type: Types.REMOVE_PRODUCT_FROM_CART,\n    payload: products,\n  });\n};\n\nexport const removeProductsFromCart = product => (dispatch, getState) => {\n  let products = [...getState().cartReducer.cartProducts];\n  products = products.filter(p => p.product.id !== product.id);\n\n  dispatch(\n    showToast({\n      title: 'Notification',\n      text: `You removed all of the ${product.name}'s from the cart.`,\n    }),\n  );\n\n  dispatch({\n    type: Types.REMOVE_PRODUCTS_FROM_CART,\n    payload: products,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}