{"ast":null,"code":"import * as Types from '../types';\nimport axios from 'axios';\nimport { getProductPromise } from '../../fakebackend/promiseData';\nimport { showToast } from './toast';\nexport const loadProductInit = () => ({\n  type: Types.LOAD_PRODUCT_INIT\n});\nexport const loadProductError = error => dispatch => {\n  dispatch({\n    type: Types.LOAD_PRODUCT_ERROR,\n    payload: error\n  });\n  dispatch(showToast({\n    title: 'Error',\n    text: error\n  }));\n};\nexport const loadProductSuccess = product => ({\n  type: Types.LOAD_PRODUCT_SUCCESS,\n  payload: product\n});\n\nconst errorHandler = (successfn, errorAction, dispatch) => {\n  return async (...args) => {\n    try {\n      await successfn(...args);\n    } catch (error) {\n      if (error.message) {\n        dispatch(errorAction(error.message));\n      }\n    }\n  };\n};\n\nexport const loadProduct = (id, callback) => async (dispatch, getState) => {\n  dispatch(loadProductInit());\n  errorHandler(async (id, callback) => {\n    const response = await axios.get(\"/product/\".concat(id));\n    const product = response.data; //const product = await getProductPromise(id);\n    // console.log(product);\n\n    dispatch(loadProductSuccess(product));\n    if (callback) callback();\n  }, loadProductError, dispatch)(id, callback);\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/react-lure-cart/src/store/actions/productDetails.js"],"names":["Types","axios","getProductPromise","showToast","loadProductInit","type","LOAD_PRODUCT_INIT","loadProductError","error","dispatch","LOAD_PRODUCT_ERROR","payload","title","text","loadProductSuccess","product","LOAD_PRODUCT_SUCCESS","errorHandler","successfn","errorAction","args","message","loadProduct","id","callback","getState","response","get","data"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,SAAT,QAA0B,SAA1B;AAEA,OAAO,MAAMC,eAAe,GAAG,OAAO;AACpCC,EAAAA,IAAI,EAAEL,KAAK,CAACM;AADwB,CAAP,CAAxB;AAIP,OAAO,MAAMC,gBAAgB,GAAGC,KAAK,IAAIC,QAAQ,IAAI;AACnDA,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAEL,KAAK,CAACU,kBAAd;AAAkCC,IAAAA,OAAO,EAAEH;AAA3C,GAAD,CAAR;AACAC,EAAAA,QAAQ,CAACN,SAAS,CAAC;AAAES,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,IAAI,EAAEL;AAAxB,GAAD,CAAV,CAAR;AACD,CAHM;AAKP,OAAO,MAAMM,kBAAkB,GAAGC,OAAO,KAAK;AAC5CV,EAAAA,IAAI,EAAEL,KAAK,CAACgB,oBADgC;AAE5CL,EAAAA,OAAO,EAAEI;AAFmC,CAAL,CAAlC;;AAKP,MAAME,YAAY,GAAG,CAACC,SAAD,EAAYC,WAAZ,EAAyBV,QAAzB,KAAsC;AACzD,SAAO,OAAO,GAAGW,IAAV,KAAmB;AACxB,QAAI;AACF,YAAMF,SAAS,CAAC,GAAGE,IAAJ,CAAf;AACD,KAFD,CAEE,OAAOZ,KAAP,EAAc;AACd,UAAIA,KAAK,CAACa,OAAV,EAAmB;AACjBZ,QAAAA,QAAQ,CAACU,WAAW,CAACX,KAAK,CAACa,OAAP,CAAZ,CAAR;AACD;AACF;AACF,GARD;AASD,CAVD;;AAYA,OAAO,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,QAAL,KAAkB,OAAOf,QAAP,EAAiBgB,QAAjB,KAA8B;AACzEhB,EAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AAEAa,EAAAA,YAAY,CACV,OAAOM,EAAP,EAAWC,QAAX,KAAwB;AACtB,UAAME,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAN,oBAAsBJ,EAAtB,EAAvB;AACA,UAAMR,OAAO,GAAGW,QAAQ,CAACE,IAAzB,CAFsB,CAItB;AACA;;AACAnB,IAAAA,QAAQ,CAACK,kBAAkB,CAACC,OAAD,CAAnB,CAAR;AAEA,QAAIS,QAAJ,EAAcA,QAAQ;AACvB,GAVS,EAWVjB,gBAXU,EAYVE,QAZU,CAAZ,CAaEc,EAbF,EAaMC,QAbN;AAcD,CAjBM","sourcesContent":["import * as Types from '../types';\nimport axios from 'axios';\n\nimport { getProductPromise } from '../../fakebackend/promiseData';\nimport { showToast } from './toast';\n\nexport const loadProductInit = () => ({\n  type: Types.LOAD_PRODUCT_INIT,\n});\n\nexport const loadProductError = error => dispatch => {\n  dispatch({ type: Types.LOAD_PRODUCT_ERROR, payload: error });\n  dispatch(showToast({ title: 'Error', text: error }));\n};\n\nexport const loadProductSuccess = product => ({\n  type: Types.LOAD_PRODUCT_SUCCESS,\n  payload: product,\n});\n\nconst errorHandler = (successfn, errorAction, dispatch) => {\n  return async (...args) => {\n    try {\n      await successfn(...args);\n    } catch (error) {\n      if (error.message) {\n        dispatch(errorAction(error.message));\n      }\n    }\n  };\n};\n\nexport const loadProduct = (id, callback) => async (dispatch, getState) => {\n  dispatch(loadProductInit());\n\n  errorHandler(\n    async (id, callback) => {\n      const response = await axios.get(`/product/${id}`);\n      const product = response.data;\n\n      //const product = await getProductPromise(id);\n      // console.log(product);\n      dispatch(loadProductSuccess(product));\n\n      if (callback) callback();\n    },\n    loadProductError,\n    dispatch,\n  )(id, callback);\n};\n"]},"metadata":{},"sourceType":"module"}